!function(){"use strict";class NikoAuthCore{constructor(){this.supabase=null,this.currentUser=null,this.userRole=null,this.isInitialized=!1,this._ready=!1,this._initPromise=null}async init(){if(this._initPromise)return this._initPromise;console.log("Initializing Niko Auth Core...");try{this._initPromise=this._performInit();const result=await this._initPromise;return result}catch(error){console.error("Failed to initialize auth core:",error);throw error}}async _performInit(){try{const{createClient:createClient}=await import("https://cdn.skypack.dev/@supabase/supabase-js");this.supabase=createClient("https://bzjoxjqfpmjhbfijthpp.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ6am94anFmcG1qaGJmaWp0aHBwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjIyMzksImV4cCI6MjA3MTMzODIzOX0.ry3Xbso3Yr6HORiYZv3Bae1txMu1n7h4Ib3adKX1Qqs"),await this.checkAuthState(),this.setupEventListeners(),this.isInitialized=!0,this._ready=!0,console.log("✅ Niko Auth Core initialized successfully"),window.dispatchEvent(new CustomEvent("NikoAuthCore:ready")),console.log("✅ NikoAuthCore:ready event fired");return!0}catch(error){throw console.error("Initialization error:",error),error}}async ensureInitialized(){return this.isInitialized||await this.init(),this.isInitialized}async checkAuthState(){try{const{data:{user:user}}=await this.supabase.auth.getUser();user&&(this.currentUser=user,this.userRole=user.user_metadata?.user_type||"Customer",console.log("User authenticated:",user.email,"Role:",this.userRole),window.location.pathname.includes("/auth/")&&this.redirectToDashboard())}catch(error){console.error("Auth state check failed:",error)}}setupEventListeners(){this.supabase.auth.onAuthStateChange(async(event,session)=>{console.log("Auth state changed:",event),await this.handleAuthStateChange(event,session)})}async handleAuthStateChange(event,session){switch(event){case"SIGNED_IN":this.currentUser=session.user,this.userRole=session.user.user_metadata?.user_type||"Customer",this.redirectToDashboard();break;case"SIGNED_OUT":this.currentUser=null,this.userRole=null}}async register(email,password,name,userType){await this.ensureInitialized();try{console.log("Registering user:",{email:email,name:name,userType:userType});const{data:data,error:error}=await this.supabase.auth.signUp({email:email,password:password,options:{data:{name:name,user_type:userType}}});return error?(console.error("Registration error:",error),{success:!1,error:error.message}):(console.log("User registered successfully:",data.user),{success:!0,user:data.user,message:"Registration successful! Please check your email for verification."})}catch(error){return console.error("Registration failed:",error),{success:!1,error:error.message}}}async login(email,password){await this.ensureInitialized();try{console.log("Logging in user:",email);const{data:data,error:error}=await this.supabase.auth.signInWithPassword({email:email,password:password});return error?(console.error("Login error:",error),{success:!1,error:error.message}):(this.currentUser=data.user,this.userRole=data.user.user_metadata?.user_type||"Customer",console.log("User logged in successfully:",data.user.email),{success:!0,user:data.user,redirectUrl:this.getDashboardUrl()})}catch(error){return console.error("Login failed:",error),{success:!1,error:error.message}}}async logout(){await this.ensureInitialized();try{const{error:error}=await this.supabase.auth.signOut();return error?(console.error("Logout error:",error),{success:!1,error:error.message}):(this.currentUser=null,this.userRole=null,console.log("User logged out successfully"),this.redirectToLogin(),{success:!0})}catch(error){return console.error("Logout failed:",error),{success:!1,error:error.message}}}getCurrentDomain(){return window.location.hostname}getBaseUrl(){const protocol=window.location.protocol,hostname=window.location.hostname,port=window.location.port;return hostname.includes("webflow.io")?`${protocol}//${hostname}`:`${protocol}//${hostname}${port?":"+port:""}`}getDashboardUrl(){const baseUrl=this.getBaseUrl(),role=(this.userRole?.toLowerCase()||"customer");return`${baseUrl}/dev/app/${role}/dashboard`}getLoginUrl(){const baseUrl=this.getBaseUrl();return`${baseUrl}/dev/app/auth/log-in`}redirectToDashboard(){const dashboardUrl=this.getDashboardUrl();console.log("Redirecting to dashboard:",dashboardUrl),window.location.href=dashboardUrl}redirectToLogin(returnUrl=null){const loginUrl=this.getLoginUrl(),currentUrl=returnUrl||window.location.pathname+window.location.search;currentUrl.includes("/auth/")?window.location.href=loginUrl:window.location.href=`${loginUrl}?return=${encodeURIComponent(currentUrl)}`}getCurrentUser(){return this.currentUser}getUserRole(){return this.userRole}isAuthenticated(){return!!this.currentUser}getIsInitialized(){return this.isInitialized}getSupabaseClient(){return this.supabase}}if("undefined"!=typeof window){const authCore=new NikoAuthCore;document.readyState==="loading"?document.addEventListener("DOMContentLoaded",async()=>{await authCore.init()}):authCore.init(),window.NikoAuthCore={register:async(email,password,name,userType)=>(console.log("NikoAuthCore.register called with:",{email:email,name:name,userType:userType}),await authCore.register(email,password,name,userType)),login:async(email,password)=>(console.log("NikoAuthCore.login called with:",email),await authCore.login(email,password)),logout:async()=>(console.log("NikoAuthCore.logout called"),await authCore.logout()),getCurrentUser:()=>authCore.getCurrentUser(),getUserRole:()=>authCore.getUserRole(),isAuthenticated:()=>authCore.isAuthenticated(),isInitialized:()=>authCore.getIsInitialized(),redirectToLogin:returnUrl=>authCore.redirectToLogin(returnUrl),redirectToDashboard:()=>authCore.redirectToDashboard(),getSupabaseClient:()=>authCore.getSupabaseClient(),_authCore:authCore,_ready:!0},console.log("✅ NikoAuthCore API exposed with methods:",Object.keys(window.NikoAuthCore))}}();