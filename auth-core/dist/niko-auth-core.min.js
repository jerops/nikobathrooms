// Niko Auth Core - Global Authentication System
(function() {
    'use strict';
    
    class NikoAuthCore {
        constructor() {
            this.supabase = null;
            this.currentUser = null;
            this.userRole = null;
            this.isInitialized = false;
            this._ready = false;
            this._initPromise = null;
        }
        
        async init() {
            if (this._initPromise) return this._initPromise;
            
            console.log('Initializing Niko Auth Core...');
            
            try {
                this._initPromise = this._performInit();
                const result = await this._initPromise;
                return result;
            } catch (error) {
                console.error('Failed to initialize auth core:', error);
                throw error;
            }
        }
        
        async _performInit() {
            try {
                // Import Supabase from CDN
                const { createClient } = await import('https://cdn.skypack.dev/@supabase/supabase-js');
                
                // Initialize Supabase client with THE EXACT WORKING API KEY
                this.supabase = createClient(
                    'https://bzjoxjqfpmjhbfijthpp.supabase.co',
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ6am94anFmcG1qaGJmaWp0aHBwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjIyMzksImV4cCI6MjA3MTMzODIzOX0.sL9omeLIgpgqYjTJM6SGQPSvUvm5z-Yr9rOzkOi2mJk'
                );
                
                await this.checkAuthState();
                this.setupEventListeners();
                this.isInitialized = true;
                this._ready = true;
                
                console.log('✅ Niko Auth Core initialized successfully');
                
                // Fire ready event after everything is set up
                window.dispatchEvent(new CustomEvent('NikoAuthCore:ready'));
                console.log('✅ NikoAuthCore:ready event fired');
                
                return true;
            } catch (error) {
                console.error('Initialization error:', error);
                throw error;
            }
        }
        
        async ensureInitialized() {
            if (!this.isInitialized) {
                await this.init();
            }
            return this.isInitialized;
        }
        
        async checkAuthState() {
            try {
                const { data: { user } } = await this.supabase.auth.getUser();
                if (user) {
                    this.currentUser = user;
                    this.userRole = user.user_metadata?.user_type || 'Customer';
                    console.log('User authenticated:', user.email, 'Role:', this.userRole);
                    
                    // Redirect to dashboard if on login/signup pages
                    if (window.location.pathname.includes('/auth/')) {
                        this.redirectToDashboard();
                    }
                }
            } catch (error) {
                console.error('Auth state check failed:', error);
            }
        }
        
        setupEventListeners() {
            this.supabase.auth.onAuthStateChange(async (event, session) => {
                console.log('Auth state changed:', event);
                await this.handleAuthStateChange(event, session);
            });
        }
        
        async handleAuthStateChange(event, session) {
            switch (event) {
                case 'SIGNED_IN':
                    this.currentUser = session.user;
                    this.userRole = session.user.user_metadata?.user_type || 'Customer';
                    this.redirectToDashboard();
                    break;
                case 'SIGNED_OUT':
                    this.currentUser = null;
                    this.userRole = null;
                    break;
            }
        }
        
        // Core Authentication Methods
        async register(email, password, name, userType) {
            await this.ensureInitialized();
            
            try {
                console.log('Registering user:', { email, name, userType });
                
                const { data, error } = await this.supabase.auth.signUp({
                    email,
                    password,
                    options: {
                        data: {
                            name,
                            user_type: userType
                        }
                    }
                });
                
                if (error) {
                    console.error('Registration error:', error);
                    return { success: false, error: error.message };
                }
                
                console.log('User registered successfully:', data.user);
                return { 
                    success: true, 
                    user: data.user,
                    message: 'Registration successful! Please check your email for verification.'
                };
                
            } catch (error) {
                console.error('Registration failed:', error);
                return { success: false, error: error.message };
            }
        }
        
        async login(email, password) {
            await this.ensureInitialized();
            
            try {
                console.log('Logging in user:', email);
                
                const { data, error } = await this.supabase.auth.signInWithPassword({
                    email,
                    password
                });
                
                if (error) {
                    console.error('Login error:', error);
                    return { success: false, error: error.message };
                }
                
                this.currentUser = data.user;
                this.userRole = data.user.user_metadata?.user_type || 'Customer';
                
                console.log('User logged in successfully:', data.user.email);
                return { 
                    success: true, 
                    user: data.user,
                    redirectUrl: this.getDashboardUrl()
                };
                
            } catch (error) {
                console.error('Login failed:', error);
                return { success: false, error: error.message };
            }
        }
        
        async logout() {
            await this.ensureInitialized();
            
            try {
                const { error } = await this.supabase.auth.signOut();
                
                if (error) {
                    console.error('Logout error:', error);
                    return { success: false, error: error.message };
                }
                
                this.currentUser = null;
                this.userRole = null;
                
                console.log('User logged out successfully');
                
                // Redirect to login page
                this.redirectToLogin();
                
                return { success: true };
                
            } catch (error) {
                console.error('Logout failed:', error);
                return { success: false, error: error.message };
            }
        }
        
        // Domain Detection and Redirects
        getCurrentDomain() {
            return window.location.hostname;
        }
        
        getBaseUrl() {
            const protocol = window.location.protocol;
            const hostname = window.location.hostname;
            const port = window.location.port;
            
            if (hostname.includes('webflow.io')) {
                return `${protocol}//${hostname}`;
            }
            
            return `${protocol}//${hostname}${port ? ':' + port : ''}`;
        }
        
        getDashboardUrl() {
            const baseUrl = this.getBaseUrl();
            const role = (this.userRole?.toLowerCase() || 'customer');
            return `${baseUrl}/dev/app/${role}/dashboard`;
        }
        
        getLoginUrl() {
            const baseUrl = this.getBaseUrl();
            return `${baseUrl}/dev/app/auth/log-in`;
        }
        
        redirectToDashboard() {
            const dashboardUrl = this.getDashboardUrl();
            console.log('Redirecting to dashboard:', dashboardUrl);
            window.location.href = dashboardUrl;
        }
        
        redirectToLogin(returnUrl = null) {
            const loginUrl = this.getLoginUrl();
            const currentUrl = returnUrl || window.location.pathname + window.location.search;
            
            if (!currentUrl.includes('/auth/')) {
                window.location.href = `${loginUrl}?return=${encodeURIComponent(currentUrl)}`;
            } else {
                window.location.href = loginUrl;
            }
        }
        
        // Utility Methods
        getCurrentUser() {
            return this.currentUser;
        }
        
        getUserRole() {
            return this.userRole;
        }
        
        isAuthenticated() {
            return !!this.currentUser;
        }
        
        // Compatibility methods for CMS integration
        getIsInitialized() {
            return this.isInitialized;
        }
        
        getSupabaseClient() {
            return this.supabase;
        }
    }
    
    // Initialize and expose globally ONLY in browser
    if (typeof window !== 'undefined') {
        const authCore = new NikoAuthCore();
        
        // Initialize on DOM ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', async () => {
                await authCore.init();
            });
        } else {
            authCore.init();
        }
        
        // DIRECTLY assign to window - no module exports
        window.NikoAuthCore = {
            // Auth methods - properly bound
            register: async function(email, password, name, userType) {
                console.log('NikoAuthCore.register called with:', { email, name, userType });
                return await authCore.register(email, password, name, userType);
            },
            login: async function(email, password) {
                console.log('NikoAuthCore.login called with:', email);
                return await authCore.login(email, password);
            },
            logout: async function() {
                console.log('NikoAuthCore.logout called');
                return await authCore.logout();
            },
            
            // State methods
            getCurrentUser: function() {
                return authCore.getCurrentUser();
            },
            getUserRole: function() {
                return authCore.getUserRole();
            },
            isAuthenticated: function() {
                return authCore.isAuthenticated();
            },
            
            // Compatibility methods for CMS integration
            isInitialized: function() {
                return authCore.getIsInitialized();
            },
            
            // Utility methods
            redirectToLogin: function(returnUrl) {
                return authCore.redirectToLogin(returnUrl);
            },
            redirectToDashboard: function() {
                return authCore.redirectToDashboard();
            },
            
            // Advanced access
            getSupabaseClient: function() {
                return authCore.getSupabaseClient();
            },
            
            // Internal access for debugging
            _authCore: authCore,
            _ready: true
        };
        
        console.log('✅ NikoAuthCore API exposed with methods:', Object.keys(window.NikoAuthCore));
    }
})();