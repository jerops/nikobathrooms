class NikoBathroomsViewTransitions{constructor(e={}){this.config={appPath:e.appPath||"/dev/app/",contentWrapperClass:e.contentWrapperClass||".shell_main-wrapper",transitionDuration:e.transitionDuration||400,debug:e.debug||!1,enableAnalytics:e.enableAnalytics||!1,...e},this.transitionCount=0,this.init()}log(e,...t){this.config.debug&&console.log("🎬 [NikoViewTransitions] "+e,...t)}analytics(e,t={}){this.config.enableAnalytics&&window.gtag&&window.gtag("event",e,{event_category:"view_transitions",...t})}isAppUrl(e){try{const t=new URL(e,window.location.origin).pathname,n=t.startsWith(this.config.appPath);return this.log(`URL check: ${e} -> ${n?"APP":"EXTERNAL"}`),n}catch(t){return this.log("Error parsing URL:",e,t),!1}}async handleTransition(e){const t=performance.now();this.transitionCount++,this.log(`Starting transition #${this.transitionCount} to:`,e);if(!document.startViewTransition)return this.log("View Transitions not supported, using normal navigation"),this.analytics("transition_fallback",{reason:"unsupported",url:e}),void(window.location.href=e);try{document.body.classList.add("niko-transitioning");const n=await fetch(e);if(!n.ok)throw new Error(`HTTP ${n.status}: ${n.statusText}`);const i=await n.text(),s=new DOMParser,r=s.parseFromString(i,"text/html"),o=r.querySelector(this.config.contentWrapperClass)?.innerHTML,a=document.querySelector(this.config.contentWrapperClass);if(!o||!a)return this.log("Content wrapper not found, falling back to normal navigation"),this.analytics("transition_fallback",{reason:"no_content_wrapper",url:e}),void(window.location.href=e);const c=document.startViewTransition(()=>{a.innerHTML=o,document.title=r.title;const t=r.querySelector('meta[name="description"]'),n=document.querySelector('meta[name="description"]');t&&n&&n.setAttribute("content",t.getAttribute("content")),window.history.pushState({},"",e),this.log(`Transition #${this.transitionCount} completed successfully`)});await c.finished;const l=performance.now(),u=l-t;this.analytics("transition_success",{url:e,duration:Math.round(u),transition_number:this.transitionCount}),this.log(`Transition #${this.transitionCount} finished in ${Math.round(u)}ms`)}catch(n){this.log("Transition failed:",n),this.analytics("transition_error",{url:e,error:n.message}),window.location.href=e}finally{document.body.classList.remove("niko-transitioning")}}init(){this.log("🚀 Initializing Niko Bathrooms View Transitions System",this.config),window.nikoBathroomsViewTransitions={version:"1.0.0",instance:this,stats:()=>({transitionCount:this.transitionCount,config:this.config})},document.addEventListener("click",e=>{const t=e.target.closest("a");!t||!t.href||"_blank"===t.target||t.download||e.ctrlKey||e.metaKey||e.shiftKey||!this.isAppUrl(window.location.href)||!this.isAppUrl(t.href)||t.href===window.location.href||(this.log("🔗 Intercepting link click:",t.href),e.preventDefault(),this.handleTransition(t.href))}),window.addEventListener("popstate",e=>{this.isAppUrl(window.location.href)&&(this.log("⬅️ Handling browser navigation:",window.location.href),this.handleTransition(window.location.href))}),this.config.debug&&document.addEventListener("keydown",e=>{e.ctrlKey&&e.shiftKey&&"T"===e.key&&console.table(this.stats())}),this.log("✅ View Transitions System initialized successfully"),this.analytics("system_initialized",{config:this.config})}stats(){return{transitionCount:this.transitionCount,config:this.config,supported:!!document.startViewTransition}}updateConfig(e){this.config={...this.config,...e},this.log("Config updated:",this.config)}}"undefined"!=typeof window&&!window.nikoBathroomsViewTransitionsInitialized&&window.addEventListener("DOMContentLoaded",()=>{const e=window.nikoBathroomsViewTransitionsConfig||{};window.nikoBathroomsViewTransitions=new NikoBathroomsViewTransitions(e),window.nikoBathroomsViewTransitionsInitialized=!0}),"undefined"!=typeof module&&module.exports&&(module.exports=NikoBathroomsViewTransitions),"undefined"!=typeof window&&(window.NikoBathroomsViewTransitions=NikoBathroomsViewTransitions);